#include <stdlib.h>
int** get2dArray(int row,int col)
{
    int **arr;
    arr = (int **)malloc(sizeof(int *) * row);
    for(int i=0;i<row;i++)
        arr[i] = (int *)malloc(sizeof(int) * col);

    return arr;
}

struct queue
{
    int arr[1010];
    int front,rear;
};
typedef struct queue Queue;

void initQueue(Queue *q)
{
    q->front = -1;
    q->rear = -1;
}

int isEmpty(Queue *q)
{
    if(q->front == q->rear)
        return 1;
    return 0;
}

int isFull(Queue *q)
{
    return 0;
}

void insertQueue(Queue *q, int data)
{

    q->rear++;
    q->arr[q->rear] = data;
}

int delQueue(Queue *q)
{
    int data;
    q->front++;
    data = q->arr[q->front];
    return data;
}
void BFS(int **mat,int row,int col,int start)
{
    Queue q;
    int data,i,j,count;
    static int traverse[1000];
    for(i=0;i<row;i++)
       traverse[i] = 0;
    count = 6;
    initQueue(&q);
    insertQueue(&q,start-1);
    traverse[start-1] = 1;
    while(! isEmpty(&q))
    {
        data = delQueue(&q);
        for(i=0;i<col;i++)
        {
            if(mat[data][i] == 1 && traverse[i] == 0)
            {
                insertQueue(&q,i);
                if(traverse[data] == 1)
                    traverse[i] = 6;
                else
                traverse[i] = traverse[data] + 6;
            }
        }
    }
    
    for(i=0;i<row;i++){
        if(traverse[i] == 0)
            printf("-1 ");
        else if(traverse[i] != 1)
            printf("%d ",traverse[i]);
    }
    printf("\n");
        
        
}



int main()
{
    int **graph,row,col,start,t,n,x,y,s,i,j;
    long int m,l;
    
    scanf("%d",&t);
    while(t--)
    {
                
        scanf("%d",&n);
        scanf("%ld",&m);
        graph = get2dArray(n,n);
        for(i=0;i<n;i++)
            for(j=0;j<n;j++)
                graph[i][j] = 0;
        
        for(l=0;l<m;l++){
            scanf("%d",&x);
            scanf("%d",&y);
            graph[x-1][y-1] = 1;
            graph[y-1][x-1] = 1;
            
            
        }
        scanf("%d",&s);
        
        BFS(graph,n,n,s);
        
    }
    return 0;
}


